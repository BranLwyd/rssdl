syntax = "proto3";

//
// Proto buffer definitions for rssdl.
//

// Feed specifies all parameters of an RSS feed that is being watched.
message Feed {
  // Required. The name of the feed.
  string name = 1;
  // Required. The URL of the feed.
  string url = 2;
  // Required if not set in config. The location to which linked files are
  // downloaded.
  string download_dir = 3;
  // Required if not set in config. A regex applied to the title, which should
  // have exactly one capture group. Any feed items that do not match the
  // regex, or do not capture an "order" that is lexicographically the greatest
  // seen so far, are discarded.
  string order_regex = 4;
  // Required if not set in config. When to start checking the feed each week,
  // as a string in the format "Thu 7:30PM".
  string check_start = 5;
  // Required if not set in config. When to stop checking the feed each week,
  // as a string in the format "Thu 7:30PM".
  string check_end = 6;
  // Required if not set in config. How frequently to check the feed, in
  // seconds per check.
  uint32 check_freq_s = 7;
}

// Config specifies the configuration for rssdld.
message Config {
  // The feeds to watch. Each feed must have a unique name.
  repeated Feed feed = 1;

  // The settings below are overridden by their feed-specific counterparts.

  // The location to which linked files are downloaded.
  string download_dir = 2;
  // A regex applied to the title, which should have exactly one capture group.
  // Any feed items that do not match the regex, or do not capture an "order"
  // that is lexicographically the greatest seen so far, are discarded.
  string order_regex = 3;
  // When to start checking each feed each week, as a string in the format "Thu
  // 7:30PM".
  string check_start = 4;
  // When to stop checking each feed each week, as a string in the format "Thu
  // 7:30PM".
  string check_end = 5;
  // How frequently to check the feed, in seconds per check.
  uint32 check_freq_s = 6;
}

message State {
  message FeedState {
    // The current order, as captured by the feed's order_regex.
    string order = 1;
  }

  // The current state of each feed, by feed name.
  map<string, FeedState> feed_state = 1;
}
